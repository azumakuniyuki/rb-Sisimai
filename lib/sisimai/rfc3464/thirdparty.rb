module Sisimai
  module RFC3464
    module ThirdParty
      class << self
        ThirdParty = {
          #"Aol"     => ["X-Outbound-Mail-Relay-"], # X-Outbound-Mail-Relay-(Queue-ID|Sender)
          "PowerMTA" => ["X-PowerMTA-"],            # X-PowerMTA-(VirtualMTA|BounceCategory)
          #"Yandex"  => ["X-Yandex-"],              # X-Yandex-(Queue-ID|Sender)
        }.freeze

        # is3rdparty() returns true if the argument is a line generated by a MTA which have fields defined
        # in RFC3464 inside of a bounce mail the MTA returns
        # @param    string argv1   A line of a bounce mail
        # @return   bool           The line indicates that a bounce mail generated by the 3rd party MTA
        def is3rdparty(argv1 = "")
          cv = Sisimai::RFC3464::ThirdParty.returnedby(argv1)
          return false if cv.empty?
          return true
        end

        # returnedby() returns an MTA name of the 3rd party
        # @param    string argv1   A line of a bounce mail
        # @return   string         An MTA name of the 3rd party
        def returnedby(argv1 = "")
          return "" unless argv1
          return "" unless argv1.start_with?("X-")

          ThirdParty.each_key do |e|
            # Does the argument include the 3rd party specific field?
            return e if argv1.start_with?(ThirdParty[e][0])
          end
          return ""
        end

        # xfield() returns rfc1894.Field() compatible slice for the specific field of the 3rd party MTA
        # @param    string argv1  A line of the error message
        # @return   []            RFC1894->field() compatible array
        # @see      Sisimai::RFC1894
        def xfield(argv1 = "")
          return [] if argv1.nil? || argv1.empty?
          party = Sisimai::RFC3464::ThirdParty.returnedby(argv1); return [] if party.empty?
          return Module.const_get("Sisimai::RFC3464::ThirdParty::" << party).xfield(argv1)
        end
      end

      module PowerMTA
        class << self
          require "sisimai/string"
          FieldGroup = {
            "x-powermta-virtualmta"     => "host", # X-PowerMTA-VirtualMTA: mx22.neko.example.jp
            "x-powermta-bouncecategory" => "text", # X-PowerMTA-BounceCategory: bad-mailbox
          }.freeze
          MessagesOf = {
            "bad-domain"          => "hostunknown",
            "bad-mailbox"         => "userunknown",
            "inactive-mailbox"    => "disabled",
            "message-expired"     => "expired",
            "no-answer-from-host" => "networkerror",
            "policy-related"      => "policyviolation",
            "quota-issues"        => "mailboxfull",
            "routing-errors"      => "systemerror",
            "spam-related"        => "spamdetected",
          }.freeze

          # Returns an array which is compatible with the value returned from Sisimai::RFC1894->field()
          # @param    string argv1   A line of the error message
          # @return   Array          ["field-name", "value-type", "value", "field-group", "comment"]
          # @see      https://bird.com/email/power-mta
          def xfield(argv1 = "")
            return [] if argv1.nil? || argv1.empty?

            fieldparts = argv1.split(":", 2)
            xfieldname = fieldparts[0].downcase
            xgroupname = FieldGroup[xfieldname]; return [] if xgroupname.nil?
            xfieldlist = ["", "", Sisimai::String.sweep(fieldparts[1]), xgroupname, "", "PowerMTA"]

            # - 0: Field-Name
            # - 1: Sub Type: RFC822, DNS, X-Unix, and so on)
            # - 2: Value
            # - 3: Field Group(addr, code, date, host, stat, text)
            # - 4: Comment
            # - 5: 3rd Party MTA-Name
            if xfieldname == "x-powermta-bouncecategory"
              # X-PowerMTA-BounceCategory: bad-mailbox
              # Set the bounce reason picked from the value of the field
              xfieldlist[0] = xfieldname
              xfieldlist[4] = sprintf("reason:%s", (MessagesOf[xfieldlist[2]] || ""))

            elsif xfieldname == "x-powermta-virtualmta"
              # X-PowerMTA-VirtualMTA: mx22.neko.example.jp
              xfieldlist[0] = "Reporting-MTA"
            end

            return xfieldlist
          end

        end
      end
    end
  end
end

